{ "name": "Nit",
  "scopeName": "source.nit",
  "fileTypes": ["nit"],

  "patterns": [
    { "include": "#strings" },
    { "include": "#markup" },
    { "include": "#comments" },
    { "include": "#keyword" },
    { "include": "#constant" },
    { "include": "#storage" },
    { "include": "#variable" },
    { "include": "#entity" }
  ],

  "repository": {
      "comment-single-line": {
          "name": "comment.singleline.nit",
          "match": "#.*"
      },
      "comments": {
        "patterns": [
            { "include": "#comment-single-line" }
        ]
      },
      "character": {
          "name": "string.character.nit",
          "match": "('[^\\\\']'|'\\\\.')"
      },
      "simple-string": {
          "name": "string.quoted.double.untitled",
          "begin": "\\\"",
          "end": "\\\"",
          "patterns": [
              { "include": "#inshortstring-code" },
              {  "name": "string.char.nit",
                 "match": "([^\\\\]|\\\\.)"
              }
          ]
      },
      "long-tquote-string": {
          "name": "string.triple.nit",
          "begin": "\\\"\\\"\\\"",
          "end": "\\\"\\\"\\\"",
          "patterns": [
              { "include": "#inlongstring-code" },
              {  "name": "string.char.nit",
                 "match": "([^\\\\]|\\\\.)"
              }
          ]
      },
      "long-tquote-alt-string": {
          "name": "string.triple.alt.nit",
          "begin": "'''",
          "end": "'''",
          "patterns": [
              { "include": "#inlongstring-code" }
          ]
      },
      "inlongstring-code": {
          "name": "incode.nit",
          "begin": "{{{",
          "end": "}}}",
          "patterns": [
              { "include": "$self" }
          ]
      },
      "inshortstring-code": {
          "name": "string.quoted.double.untitled",
          "begin": "{",
          "end": "}",
          "patterns": [
              { "include": "$self" }
          ]
      },
      "strings": {
          "patterns": [
              {
                  "include": "#long-tquote-alt-string"
              },
              {
                  "include": "#long-tquote-string"
              },
              {
                  "include": "#simple-string"
              },
              {
                  "include": "#character"
              }
          ]
      },
      "variable": {
          "patterns": [
              {  "name": "variable.language.nit",
                 "match": "\\b(self)\\b"
              },
              {
                  "name": "variable.other.nit",
                  "match": "[a-z][a-zA-Z0-9_]*"
              }
          ]
      },
      "constant": {
            "patterns": [
                {  "name": "constant.numeric.float.nit",
                   "match": "-?[0-9]*\\.[0-9]+"
                },
                {  "name": "constant.numeric.int.nit",
                   "match": "-?([0-9]+)"
                },
                {  "name": "constant.numeric.hex.nit",
                   "match": "-?0(x|X)[0-9A-Fa-f]+"
                },
                {  "name": "constant.language.nit",
                   "match": "\\b(true|false|null)\\b"
                }
            ]
      },
      "markup": {
          "patterns": [
              { "name": "markup.raw.nit",
                "begin": "`{",
                "end": "`}"
              }
          ]
      },
      "entity": {
            "patterns": [
                {  "name": "entity.name.type.nit",
                   "match": "[A-Z][a-zA-Z0-9_]*"
                },
                {
                  "name": "entity.other.attribute-name.nit",
                  "match": "_[a-z][a-zA-Z0-9_]*"
                }
            ]
      },
      "storage": {
          "patterns": [
              {  "name": "storage.type.nit",
                 "match": "\\b(fun|init|redef|class|interface|module|import|package|abstract|universal|enum)\\b"
              },
              {  "name": "storage.modifier.nit",
                 "match": "\\b(private|protected|public|intrude|extern)\\b"
              }
          ]
      },
      "keyword": {
          "patterns": [
              {
                  "name": "keyword.control.nit",
                  "match": "\\b(label|if|then|loop|else|while|for|do|end|in)\\b"
              },
              {
                  "name": "keyword.breaks.nit",
                  "match": "\\b(return|continue|break|abort)\\b"
              },
              {
                  "name": "keyword.declaration.nit",
                  "match": "\\b(nullable|once|new|var)\\b"
              },
              {
                  "name": "keyword.annot.nit",
                  "match": "\\b(is)\\b"
              },
              {
                  "name": "keyword.types.nit",
                  "match": "\\b(isa|as|type|isset)\\b"
              },
              {
                  "name": "keyword.misc.nit",
                  "match": "\\b(assert|__debug__|super|implies)\\b"
              },
              {  "name": "keyword.operator.nit",
                 "match": "(==|\\+=|-=|!=|=|!|@|<=>|<=|<<|<|>=|>>|>|\\(|\\)|\\[|\\]|,|::|:|\\.\\.\\.|\\.\\.|\\.|\\+|-|\\*\\*|\\*|/|%|)"
              },
              {
                  "name": "keyword.operator.boolean.nit",
                  "match": "\\b(and|not|or)\\b"
              }
          ]
      }
  },

  "uuid": "6b33d803-1dfa-4063-b203-abc0409bd1bb"
}